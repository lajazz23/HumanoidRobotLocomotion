{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reinforcement Learning in Isaac Lab","text":"<p>You can find my forked repository on GitHub.</p> <p>This resource is used to document my edits to the original Isaac Lab repository for my project.</p>"},{"location":"#project-overview","title":"Project overview","text":"<p>The Isaac Lab VR project is my project for the Summer 2025 SULI internship at Brookhaven National Lab. In this project, we build on top of the original Isaac Lab repository to create a trained Reinforcement Learning model using the Unitree G1 robot and RL Games. We implement Virtual Reality as a method of evaluation and interaction with the robots in the simulation.</p>"},{"location":"#why-humanoid-robots","title":"Why Humanoid Robots?","text":"<p>Humanoid robots excel in human-centric environments. With little need for additional accommodations, humanoid robots exist as a practical tool for performing tasks that are unsafe, repetitive, or impractical for humans.\u200b</p>"},{"location":"#unitree-g1-robot","title":"Unitree G1 Robot","text":"<p>The Unitree G1 robot was developed by Unitree Robotics, a Chinese company based in Hangzhou, China in 2024. Standing at 12.7 m tall, this humanoid robot is optimal for research and development due to its open-source SDK. Due to its compatibility with Isaac Lab, it is a great candidate for research in reinforcement learning with minimal transfer cost. Furthermore, the robot is compatible with virtual reality and teleoperation. In our project, the G1 robot has 37 joint motors, allowing for the performance of flexible tasks. </p> <p></p>"},{"location":"#unitree-h1-robot","title":"Unitree H1 Robot","text":"<p>The Unitree H1 is a bigger and more powerful robot compared to the G1. It is able to perform similar tasks, and excels in stability while performing locomotion tasks. The SDK is open-source, in C++, Python, and ROS2, easily allowing it to be worked on in research. </p> <p></p>"},{"location":"#fourier-gr-1","title":"Fourier GR-1","text":"<p>The Fourier GR-1 was developed by Fourier as a humanoid robot standing at 16.5 m tall. With built-in emotional systems, it mimics humans and can hold a proper human-robot conversation. It uses the Fourier Smart Actuator to integrate all movements into a single module. The GR1 has been deployed into industry to perform service tasks. While teleoperation is possible, it is not fully supported.</p> <p></p>"},{"location":"#neo","title":"Neo","text":"<p>Neo Gamma is a humanoid robot designed for home use, developed by 1X, a tech company based in California. The robot is not bipedal, meaning that full-body locomotion cannot be tested. Neo uses embodied LLMs to learn its movements, making it easy to integrate AI agents. Furthermore, it is backed by OpenAI, allowing for longer-term support in its development.</p> <p></p>"},{"location":"#poppy-humanoid","title":"Poppy Humanoid","text":"<p>Poppy is an open-source, 3D-printable humanoid robot created by the Flowers team at Inria. Poppy has been designed to be able to dance, walk, interact with humans, and perform.  it contains 25-DoF with a vertebral column.</p>"},{"location":"#berkeley-humanoid-lite","title":"Berkeley Humanoid Lite","text":"<p>The Berkeley Humanoid Lite is a robot designed at UC Berkely that is designed to be accessible and customizable. With parts widely available, the robot can be easily produced in any lab. With modular self-contained actuators and CAN communication, the robot can be configured with flexible joints and limbs.</p>"},{"location":"#hopejr","title":"HopeJr","text":"<p>HopeJr is an open-source robot developed by HuggingFace after their acquisition of Pollen Robotics.  It contains 66 DoF, making it very versatile. With its integration into the LeRobot toolchain, it has access to data recording, teleoperation, and RL-based training.</p>"},{"location":"#author","title":"Author","text":"<p>Jasmin Lin</p> <p>jlin3@bnl.gov</p>"},{"location":"about/","title":"Description of Project","text":""},{"location":"instruction/","title":"Getting Started With IsaacLab","text":"<p>This section serves as instructions that I followed to successfully set up my Isaac Lab environment. Instructions are originally found on the Isaac Lab website. You can find their GitHub here.</p>"},{"location":"instruction/#requirements","title":"Requirements","text":"<p>To determine if your current set up is optimal to run Isaac Lab and Isaac Sim, you can install the NVIDIA Isaac Sim compatibility checker, found in the Omniverse Launcher. It is important to know that, by October 2025, the Omniverse Launcher will be deprecated. You may reference the Isaac Lab website for minimum dependencies.</p> <p>Our project was run on the following specifications:</p> <ul> <li>NVIDIA GeForce RTX 4090<ul> <li>Driver Version 551.61</li> <li>25.76 GB VRAM</li> </ul> </li> <li>Intel(R) Core (TM) i9-14900KF<ul> <li>32 CPU cores</li> <li>68.42 GB RAM</li> <li>7315 GB Storage</li> </ul> </li> <li>Windows 11 Pro v24H2</li> <li>Anaconda 24.11.1</li> </ul>"},{"location":"instruction/#installation","title":"Installation","text":"<p>Isaac Lab is built on top of Isaac Sim, so we will have to install that first. Our device is Windows-based. To find instructions for the Linux installation, please consult the Isaac Lab website.</p>"},{"location":"instruction/#isaac-sim","title":"Isaac Sim","text":"<p>To begin, we create a virtual environment called, \"isaaclab\" with python 3.10 inside Windows Terminal, and activate it. </p> <pre><code>conda create -n isaaclab python=3.10\nconda activate isaaclab\n</code></pre> <p>Next, we install PyTorch that is compatible with our system's CUDA version. In this case, we had CUDA 12.4:</p> <pre><code>pip install torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu121\n</code></pre> <p>The Isaac Lab repository recommends updating pip:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre> <p>To install the Isaac Sim packages, we ran the following:</p> <pre><code>pip install \"isaacsim[all,extscache]==4.5.0\" --extra-index-url https://pypi.nvidia.com\n</code></pre> <p>After this, Isaac Sim is fully installed. To test if this is true, we run <code>isaacsim</code> inside the terminal. After a few minutes, the Isaac Sim application will open, indicating a successful installation.</p>"},{"location":"instruction/#isaac-lab","title":"Isaac Lab","text":"<p>Next, we can begin the installation of Isaac Lab. To begin, clone the repository:</p> <pre><code>git clone https://github.com/isaac-sim/IsaacLab.git\n</code></pre> <p>Navigate into the folder and install Isaac Lab:</p> <pre><code>cd IsaacLab\nisaaclab.bat --install\n</code></pre> <p>After installation, open a demo file:</p> <pre><code>isaaclab.bat -p scripts\\tutorials\\00_sim\\create_empty.py\n</code></pre> <p>This should open Isaac Sim, with Isaac Lab inside it.</p>"},{"location":"other/","title":"Other","text":""},{"location":"training/","title":"How Training Works in Isaac Lab","text":"<p>In Isaac Lab, training is performed through </p>"},{"location":"training/#initiating-training","title":"Initiating Training","text":"<pre><code>python scripts/reinforcement_learning/skrl/train.py --task=Isaac-Velocity-Rough-G1-v0\n</code></pre>"}]}