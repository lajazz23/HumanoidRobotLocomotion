{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reinforcement Learning in Isaac Lab You can find my forked repository on GitHub . This resource is used to document my edits to the original Isaac Lab repository for my project. Project overview The Isaac Lab VR project is my project for the Summer 2025 SULI internship at Brookhaven National Lab. In this project, we build on top of the original Isaac Lab repository to create a trained Reinforcement Learning model using the Unitree G1 robot and RL Games . We implement Virtual Reality as a method of evaluation and interaction with the robots in the simulation. Why Humanoid Robots? Humanoid robots excel in human-centric environments. With little need for additional accommodations, humanoid robots exist as a practical tool for performing tasks that are unsafe, repetitive, or impractical for humans.\u200b Unitree G1 Robot The Unitree G1 robot was developed by Unitree Robotics, a Chinese company based in Hangzhou, China in 2024. Standing at 12.7 m tall, this humanoid robot is optimal for research and development due to its open-source SDK. Due to its compatibility with Isaac Lab, it is a great candidate for research in reinforcement learning with minimal transfer cost. Furthermore, the robot is compatible with virtual reality and teleoperation. In our project, the G1 robot has 37 joint motors, allowing for the performance of flexible tasks. Unitree H1 Robot The Unitree H1 is a bigger and more powerful robot compared to the G1. It is able to perform similar tasks, and excels in stability while performing locomotion tasks. The SDK is open-source, in C++, Python, and ROS2, easily allowing it to be worked on in research. Fourier GR-1 The Fourier GR-1 was developed by Fourier as a humanoid robot standing at 16.5 m tall. With built-in emotional systems, it mimics humans and can hold a proper human-robot conversation. It uses the Fourier Smart Actuator to integrate all movements into a single module. The GR1 has been deployed into industry to perform service tasks. While teleoperation is possible, it is not fully supported. How Do We Train the Robot? Author Jasmin Lin","title":"Introduction"},{"location":"#reinforcement-learning-in-isaac-lab","text":"You can find my forked repository on GitHub . This resource is used to document my edits to the original Isaac Lab repository for my project.","title":"Reinforcement Learning in Isaac Lab"},{"location":"#project-overview","text":"The Isaac Lab VR project is my project for the Summer 2025 SULI internship at Brookhaven National Lab. In this project, we build on top of the original Isaac Lab repository to create a trained Reinforcement Learning model using the Unitree G1 robot and RL Games . We implement Virtual Reality as a method of evaluation and interaction with the robots in the simulation.","title":"Project overview"},{"location":"#why-humanoid-robots","text":"Humanoid robots excel in human-centric environments. With little need for additional accommodations, humanoid robots exist as a practical tool for performing tasks that are unsafe, repetitive, or impractical for humans.\u200b","title":"Why Humanoid Robots?"},{"location":"#unitree-g1-robot","text":"The Unitree G1 robot was developed by Unitree Robotics, a Chinese company based in Hangzhou, China in 2024. Standing at 12.7 m tall, this humanoid robot is optimal for research and development due to its open-source SDK. Due to its compatibility with Isaac Lab, it is a great candidate for research in reinforcement learning with minimal transfer cost. Furthermore, the robot is compatible with virtual reality and teleoperation. In our project, the G1 robot has 37 joint motors, allowing for the performance of flexible tasks.","title":"Unitree G1 Robot"},{"location":"#unitree-h1-robot","text":"The Unitree H1 is a bigger and more powerful robot compared to the G1. It is able to perform similar tasks, and excels in stability while performing locomotion tasks. The SDK is open-source, in C++, Python, and ROS2, easily allowing it to be worked on in research.","title":"Unitree H1 Robot"},{"location":"#fourier-gr-1","text":"The Fourier GR-1 was developed by Fourier as a humanoid robot standing at 16.5 m tall. With built-in emotional systems, it mimics humans and can hold a proper human-robot conversation. It uses the Fourier Smart Actuator to integrate all movements into a single module. The GR1 has been deployed into industry to perform service tasks. While teleoperation is possible, it is not fully supported.","title":"Fourier GR-1"},{"location":"#how-do-we-train-the-robot","text":"","title":"How Do We Train the Robot?"},{"location":"#author","text":"Jasmin Lin","title":"Author"},{"location":"about/","text":"Description of Project","title":"Project Structure"},{"location":"about/#description-of-project","text":"","title":"Description of Project"},{"location":"instruction/","text":"Getting Started With IsaacLab This section serves as instructions that I followed to successfully set up my Isaac Lab environment. Instructions are originally found on the Isaac Lab website . You can find their GitHub here . Requirements To determine if your current set up is optimal to run Isaac Lab and Isaac Sim, you can install the NVIDIA Isaac Sim compatibility checker, found in the Omniverse Launcher. It is important to know that, by October 2025, the Omniverse Launcher will be deprecated. You may reference the Isaac Lab website for minimum dependencies. Our project was run on the following specifications: NVIDIA GeForce RTX 4090 Driver Version 551.61 25.76 GB VRAM Intel(R) Core (TM) i9-14900KF 32 CPU cores 68.42 GB RAM 7315 GB Storage Windows 11 Pro v24H2 Anaconda Installation Isaac Lab is built on top of Isaac Sim, so we will have to install that first. Our device is Windows-based. To find instructions for the Linux installation, please consult the Isaac Lab website. Isaac Sim To begin, we create a virtual environment called, \"isaaclab\" with python 3.10 inside Windows Terminal, and activate it. conda create -n isaaclab python=3.10 conda activate isaaclab Next, we install PyTorch that is compatible with our system's CUDA version. In this case, we had CUDA 12.4: pip install torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu121 The Isaac Lab repository recommends updating pip: python -m pip install --upgrade pip To install the Isaac Sim packages, we ran the following: pip install \"isaacsim[all,extscache]==4.5.0\" --extra-index-url https://pypi.nvidia.com After this, Isaac Sim is fully installed. To test if this is true, we run isaacsim inside the terminal. After a few minutes, the Isaac Sim application will open, indicating a successful installation. Isaac Lab Next, we can begin the installation of Isaac Lab. To begin, clone the repository: git clone https://github.com/isaac-sim/IsaacLab.git Navigate into the folder and install Isaac Lab: cd IsaacLab isaaclab.bat --install After installation, open a demo file: isaaclab.bat -p scripts\\tutorials\\00_sim\\create_empty.py This should open Isaac Sim, with Isaac Lab inside it.","title":"Installation"},{"location":"instruction/#getting-started-with-isaaclab","text":"This section serves as instructions that I followed to successfully set up my Isaac Lab environment. Instructions are originally found on the Isaac Lab website . You can find their GitHub here .","title":"Getting Started With IsaacLab"},{"location":"instruction/#requirements","text":"To determine if your current set up is optimal to run Isaac Lab and Isaac Sim, you can install the NVIDIA Isaac Sim compatibility checker, found in the Omniverse Launcher. It is important to know that, by October 2025, the Omniverse Launcher will be deprecated. You may reference the Isaac Lab website for minimum dependencies. Our project was run on the following specifications: NVIDIA GeForce RTX 4090 Driver Version 551.61 25.76 GB VRAM Intel(R) Core (TM) i9-14900KF 32 CPU cores 68.42 GB RAM 7315 GB Storage Windows 11 Pro v24H2 Anaconda","title":"Requirements"},{"location":"instruction/#installation","text":"Isaac Lab is built on top of Isaac Sim, so we will have to install that first. Our device is Windows-based. To find instructions for the Linux installation, please consult the Isaac Lab website.","title":"Installation"},{"location":"instruction/#isaac-sim","text":"To begin, we create a virtual environment called, \"isaaclab\" with python 3.10 inside Windows Terminal, and activate it. conda create -n isaaclab python=3.10 conda activate isaaclab Next, we install PyTorch that is compatible with our system's CUDA version. In this case, we had CUDA 12.4: pip install torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu121 The Isaac Lab repository recommends updating pip: python -m pip install --upgrade pip To install the Isaac Sim packages, we ran the following: pip install \"isaacsim[all,extscache]==4.5.0\" --extra-index-url https://pypi.nvidia.com After this, Isaac Sim is fully installed. To test if this is true, we run isaacsim inside the terminal. After a few minutes, the Isaac Sim application will open, indicating a successful installation.","title":"Isaac Sim"},{"location":"instruction/#isaac-lab","text":"Next, we can begin the installation of Isaac Lab. To begin, clone the repository: git clone https://github.com/isaac-sim/IsaacLab.git Navigate into the folder and install Isaac Lab: cd IsaacLab isaaclab.bat --install After installation, open a demo file: isaaclab.bat -p scripts\\tutorials\\00_sim\\create_empty.py This should open Isaac Sim, with Isaac Lab inside it.","title":"Isaac Lab"},{"location":"jumpstart/","text":"","title":"Jumpstart"},{"location":"jumpstart/#_1","text":"","title":""},{"location":"vr_nav/","text":"","title":"VR Navigation"},{"location":"vr_nav/#_1","text":"","title":""}]}